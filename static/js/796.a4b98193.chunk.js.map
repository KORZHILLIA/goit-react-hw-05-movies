{"version":3,"file":"static/js/796.a4b98193.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/CastActor/castActor.module.css?7d37","components/CastActor/CastActor.jsx","webpack://react-homework-template/./src/pages/Cast/cast.module.css?3847","pages/Cast/Cast.jsx","shared/services/moviesApi.js","shared/hooks/useMovies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"fallback\":\"castActor_fallback__RypQt\"};","import PropTypes from 'prop-types';\nimport styles from './castActor.module.css';\n\nconst CastActor = ({ name, img, character }) => {\n  const preparedImgSrc = img\n    ? `https://image.tmdb.org/t/p/w500${img}`\n    : 'https://image.tmdb.org/t/p/w500/lXhgCODAbBXL5buk9yEmTpOoOgR.jpg';\n\n  const chooseClassName = img => (img ? null : styles.fallback);\n\n  return (\n    <div className={styles.actor}>\n      {<img className={chooseClassName()} src={preparedImgSrc} alt={name} />}\n      <p>Actor: {name}</p>\n      <p>Character: {character ? character : 'Unknown'}</p>\n    </div>\n  );\n};\n\nCastActor.defaultProps = {\n  name: 'Unknown',\n  character: 'Unknown',\n};\n\nCastActor.propTypes = {\n  name: PropTypes.string,\n  img: PropTypes.string,\n  character: PropTypes.string,\n};\n\nexport default CastActor;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cast_list__BjE1s\",\"actor\":\"cast_actor__pKF+V\"};","import { useParams } from 'react-router-dom';\nimport { useMovies } from 'shared/hooks/useMovies';\nimport CastActor from '../../components/CastActor';\nimport styles from './cast.module.css';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [state] = useMovies(\n    { cast: [], loading: false, error: null },\n    movieId,\n    'credits'\n  );\n\n  const { cast, loading, error } = state;\n  const castList = cast.map(\n    ({ profile_path, id, original_name, character }) => (\n      <li className={styles.actor} key={id}>\n        <CastActor\n          img={profile_path}\n          name={original_name}\n          character={character}\n        />\n      </li>\n    )\n  );\n  return (\n    <>\n      {loading && <p>Loading</p>}\n      {error && <p>{error}</p>}\n      {!loading && !cast.length && <p>Sorry, we have no cast information</p>}\n      {<ul className={styles.list}>{castList}</ul>}\n    </>\n  );\n};\n\nexport default Cast;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f3ea85ad66a7076fbd3968a20cd79e45';\n\nconst params = new URLSearchParams({\n  api_key: KEY,\n  language: 'en-US',\n  page: 1,\n  include_adult: true,\n});\n\nasync function getTrendingMoviesForDay() {\n  const response = await fetch(`${BASE_URL}trending/movie/day?${params}`);\n  if (!response.ok) {\n    throw new Error('Something went wrong, try once again...');\n  }\n  const result = response.json();\n  return result;\n}\n\nfunction fetchDifferentMovieFeatures(id, feature) {\n  const finalFeature = feature ? `/${feature}` : '';\n  const requiredFunction = async () => {\n    const response = await fetch(\n      `${BASE_URL}movie/${id}${finalFeature}?api_key=${KEY}&language=en-US`\n    );\n    if (!response.ok) {\n      throw new Error('Something went wrong, try once again...');\n    }\n    const result = response.json();\n    return result;\n  };\n  return requiredFunction();\n}\n\nasync function fetchMoviesByQuery(query) {\n  const response = await fetch(\n    `${BASE_URL}search/movie?${params}&query=${query}`\n  );\n  if (!response.ok) {\n    throw new Error('You typed something wrong, please try again');\n  }\n  const result = response.json();\n  return result;\n}\nexport {\n  getTrendingMoviesForDay,\n  fetchDifferentMovieFeatures,\n  fetchMoviesByQuery,\n};\n","import { useState, useEffect } from 'react';\nimport {\n  fetchDifferentMovieFeatures,\n  fetchMoviesByQuery,\n  getTrendingMoviesForDay,\n} from '../services/moviesApi';\n\nlet requiredInfo = null;\n\nexport function useMovies(initialState, dependenceVar, fetchParameter) {\n  const [state, setState] = useState(initialState);\n  const firstStateKey = Object.keys(state)[0];\n\n  useEffect(() => {\n    if (dependenceVar === null) {\n      return;\n    }\n    const getInfoFunction = async () => {\n      try {\n        setState(prevState => ({ ...prevState, loading: true }));\n\n        if (fetchParameter === 'searchMoviesByQuery') {\n          requiredInfo = await fetchMoviesByQuery(dependenceVar);\n        } else if (fetchParameter === 'getTrendingMovies') {\n          requiredInfo = await getTrendingMoviesForDay();\n        } else {\n          requiredInfo = await fetchDifferentMovieFeatures(\n            dependenceVar,\n            fetchParameter\n          );\n        }\n        let finalResult = requiredInfo;\n        if (\n          fetchParameter === 'reviews' ||\n          fetchParameter === 'searchMoviesByQuery' ||\n          fetchParameter === 'getTrendingMovies'\n        ) {\n          const { results } = requiredInfo;\n          finalResult = results;\n        }\n        if (fetchParameter === 'credits') {\n          const { cast } = requiredInfo;\n          finalResult = cast;\n        }\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n          [firstStateKey]: finalResult,\n        }));\n      } catch (error) {\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n          error: error.message,\n        }));\n      }\n    };\n    getInfoFunction();\n  }, [firstStateKey, dependenceVar, fetchParameter]);\n\n  return [state];\n}\n"],"names":["CastActor","name","img","character","preparedImgSrc","className","styles","chooseClassName","src","alt","defaultProps","movieId","useParams","useMovies","cast","loading","error","state","castList","map","profile_path","id","original_name","length","BASE_URL","KEY","params","URLSearchParams","api_key","language","page","include_adult","getTrendingMoviesForDay","fetch","response","ok","Error","result","json","fetchDifferentMovieFeatures","feature","finalFeature","requiredFunction","fetchMoviesByQuery","query","requiredInfo","initialState","dependenceVar","fetchParameter","useState","setState","firstStateKey","Object","keys","useEffect","getInfoFunction","prevState","finalResult","results","message"],"sourceRoot":""}