{"version":3,"file":"static/js/323.bdc688a1.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MovieExplicit/movieExplicit.module.css?bfc5","components/MovieExplicit/MovieExplicit.jsx","webpack://react-homework-template/./src/pages/MovieDetails/movieDetails.module.css?c148","pages/MovieDetails/MovieDetails.jsx","shared/services/moviesApi.js","shared/hooks/useMovies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"explicitWrapper\":\"movieExplicit_explicitWrapper__18X0F\",\"mainTitle\":\"movieExplicit_mainTitle__1GNGy\",\"year\":\"movieExplicit_year__wGmjJ movieExplicit_mainTitle__1GNGy\",\"paragraph\":\"movieExplicit_paragraph__0RWsA\",\"bold\":\"movieExplicit_bold__efhMF movieExplicit_paragraph__0RWsA\"};","import { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './movieExplicit.module.css';\n\nconst MovieExplicit = ({ img, title, date, score, overview, genres }) => {\n  const preparedImgSrc = img\n    ? `https://image.tmdb.org/t/p/w500${img}`\n    : 'https://image.tmdb.org/t/p/w500/lXhgCODAbBXL5buk9yEmTpOoOgR.jpg';\n  const preparedReleaseDate = date.slice(0, 4);\n  const allGenres = genres.map(genre => genre.name).join(', ');\n\n  return (\n    <div className={styles.explicitWrapper}>\n      <img src={preparedImgSrc} alt={title} />\n      <div className={styles.rightSide}>\n        <p className={styles.paragraph}>\n          <span className={styles.mainTitle}>{title} </span>\n          <span className={styles.year}>({preparedReleaseDate})</span>\n        </p>\n        <p className={styles.paragraph}>User score: {score}</p>\n        <p className={styles.bold}>Overview</p>\n        <p className={styles.paragraph}> {overview}</p>\n        <p className={styles.bold}>Genres</p>\n        <p className={styles.paragraph}>{allGenres}</p>\n      </div>\n    </div>\n  );\n};\n\nMovieExplicit.defaultProps = {\n  title: 'Title unknown',\n  date: 'Release date unknown',\n  score: 'Score unknown',\n  overview: 'No overview yet',\n  genres: [],\n};\n\nMovieExplicit.propTypes = {\n  img: PropTypes.string,\n  title: PropTypes.string,\n  date: PropTypes.string,\n  score: PropTypes.string,\n  overview: PropTypes.string,\n  genres: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default memo(MovieExplicit);\n","// extracted by mini-css-extract-plugin\nexport default {\"infoList\":\"movieDetails_infoList__U5At2\",\"backBtn\":\"movieDetails_backBtn__Ct37b\"};","import { Suspense } from 'react';\nimport { Link, useParams, useLocation, Outlet } from 'react-router-dom';\nimport { useMovies } from 'shared/hooks/useMovies';\nimport MovieExplicit from 'components/MovieExplicit';\nimport styles from './movieDetails.module.css';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [state] = useMovies(\n    { movie: {}, loading: false, error: null },\n    movieId,\n    ''\n  );\n\n  const location = useLocation();\n  const backRef =\n    location.state?.from ?? JSON.parse(localStorage.getItem('backRef'));\n  if (location.state) {\n    localStorage.setItem('backRef', JSON.stringify(location.state.from));\n  }\n\n  const { movie, error, loading } = state;\n  const {\n    backdrop_path,\n    original_title,\n    release_date,\n    vote_average,\n    overview,\n    genres,\n  } = movie;\n\n  return (\n    <>\n      {loading && <p>Loading</p>}\n      {error && <p>{error}</p>}\n      <Link className={styles.backBtn} to={backRef}>\n        Go back\n      </Link>\n      <MovieExplicit\n        img={backdrop_path}\n        title={original_title}\n        date={release_date}\n        score={`${Number(vote_average) * 10}%`}\n        overview={overview}\n        genres={genres}\n      />\n      <h2>Additional information</h2>\n      <ul className={styles.infoList}>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<p>Loading subpage...</p>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f3ea85ad66a7076fbd3968a20cd79e45';\n\nconst params = new URLSearchParams({\n  api_key: KEY,\n  language: 'en-US',\n  page: 1,\n  include_adult: true,\n});\n\nasync function getTrendingMoviesForDay() {\n  const response = await fetch(`${BASE_URL}trending/movie/day?${params}`);\n  if (!response.ok) {\n    throw new Error('Something went wrong, try once again...');\n  }\n  const result = response.json();\n  return result;\n}\n\nfunction fetchDifferentMovieFeatures(id, feature) {\n  const finalFeature = feature ? `/${feature}` : '';\n  const requiredFunction = async () => {\n    const response = await fetch(\n      `${BASE_URL}movie/${id}${finalFeature}?api_key=${KEY}&language=en-US`\n    );\n    if (!response.ok) {\n      throw new Error('Something went wrong, try once again...');\n    }\n    const result = response.json();\n    return result;\n  };\n  return requiredFunction();\n}\n\nasync function fetchMoviesByQuery(query) {\n  const response = await fetch(\n    `${BASE_URL}search/movie?${params}&query=${query}`\n  );\n  if (!response.ok) {\n    throw new Error('You typed something wrong, please try again');\n  }\n  const result = response.json();\n  return result;\n}\nexport {\n  getTrendingMoviesForDay,\n  fetchDifferentMovieFeatures,\n  fetchMoviesByQuery,\n};\n","import { useState, useEffect } from 'react';\nimport {\n  fetchDifferentMovieFeatures,\n  fetchMoviesByQuery,\n  getTrendingMoviesForDay,\n} from '../services/moviesApi';\n\nlet requiredInfo = null;\n\nexport function useMovies(initialState, dependenceVar, fetchParameter) {\n  const [state, setState] = useState(initialState);\n  const firstStateKey = Object.keys(state)[0];\n\n  useEffect(() => {\n    if (dependenceVar === null) {\n      return;\n    }\n    const getInfoFunction = async () => {\n      try {\n        setState(prevState => ({ ...prevState, loading: true }));\n\n        if (fetchParameter === 'searchMoviesByQuery') {\n          requiredInfo = await fetchMoviesByQuery(dependenceVar);\n        } else if (fetchParameter === 'getTrendingMovies') {\n          requiredInfo = await getTrendingMoviesForDay();\n        } else {\n          requiredInfo = await fetchDifferentMovieFeatures(\n            dependenceVar,\n            fetchParameter\n          );\n        }\n        let finalResult = requiredInfo;\n        if (\n          fetchParameter === 'reviews' ||\n          fetchParameter === 'searchMoviesByQuery' ||\n          fetchParameter === 'getTrendingMovies'\n        ) {\n          const { results } = requiredInfo;\n          finalResult = results;\n        }\n        if (fetchParameter === 'credits') {\n          const { cast } = requiredInfo;\n          finalResult = cast;\n        }\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n          [firstStateKey]: finalResult,\n        }));\n      } catch (error) {\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n          error: error.message,\n        }));\n      }\n    };\n    getInfoFunction();\n  }, [firstStateKey, dependenceVar, fetchParameter]);\n\n  return [state];\n}\n"],"names":["MovieExplicit","img","title","date","score","overview","genres","preparedImgSrc","preparedReleaseDate","slice","allGenres","map","genre","name","join","className","styles","src","alt","defaultProps","memo","movieId","useParams","useMovies","movie","loading","error","state","location","useLocation","backRef","from","JSON","parse","localStorage","getItem","setItem","stringify","backdrop_path","original_title","release_date","vote_average","to","Number","Suspense","fallback","BASE_URL","KEY","params","URLSearchParams","api_key","language","page","include_adult","getTrendingMoviesForDay","fetch","response","ok","Error","result","json","fetchDifferentMovieFeatures","id","feature","finalFeature","requiredFunction","fetchMoviesByQuery","query","requiredInfo","initialState","dependenceVar","fetchParameter","useState","setState","firstStateKey","Object","keys","useEffect","getInfoFunction","prevState","finalResult","results","cast","message"],"sourceRoot":""}