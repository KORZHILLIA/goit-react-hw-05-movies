{"version":3,"file":"static/js/35.b42db70b.chunk.js","mappings":"kOAgCA,EA9BiB,WACf,IAAMA,GAAWC,EAAAA,EAAAA,MAEjB,GAAgBC,EAAAA,EAAAA,GACd,CACEC,OAAQ,GACRC,SAAS,EACTC,MAAO,MAET,EACA,qBAPKC,GAAP,eAUQH,EAA2BG,EAA3BH,OAAQC,EAAmBE,EAAnBF,QAASC,EAAUC,EAAVD,MACnBE,EAAiBJ,EAAOK,KAAI,gBAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,GAAnB,OAChC,yBACE,SAAC,KAAD,CAAMC,GAAE,iBAAYD,GAAMJ,MAAO,CAAEM,KAAMZ,GAAzC,SACGS,KAFIC,MAMX,OACE,gCACGN,IAAW,mCACXC,IAAS,uBAAIA,KACd,wBAAKE,S,uHC3BLM,EAAW,gCACXC,EAAM,mCAENC,EAAS,IAAIC,gBAAgB,CACjCC,QAASH,EACTI,SAAU,QACVC,KAAM,EACNC,eAAe,IAJjB,SAOeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,sGACyBC,MAAM,GAAD,OAAIT,EAAJ,8BAAkCE,IADhE,WACQQ,EADR,QAEgBC,GAFhB,sBAGU,IAAIC,MAAM,2CAHpB,cAKQC,EAASH,EAASI,OAL1B,kBAMSD,GANT,kEASA,SAASE,EAA4BlB,EAAImB,GACvC,IAAMC,EAAeD,EAAO,WAAOA,GAAY,GACzCE,EAAgB,mCAAG,sGACAT,MAAM,GAAD,OACvBT,EADuB,iBACNH,GADM,OACDoB,EADC,oBACuBhB,EADvB,oBADL,WACjBS,EADiB,QAITC,GAJS,sBAKf,IAAIC,MAAM,2CALK,cAOjBC,EAASH,EAASI,OAPD,kBAQhBD,GARgB,2CAAH,qDAUtB,OAAOK,IACR,SAEcC,EAAmB,GAAnBA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAkCC,GAAlC,yFACyBX,MAAM,GAAD,OACvBT,EADuB,wBACCE,EADD,kBACiBkB,IAF/C,WACQV,EADR,QAIgBC,GAJhB,sBAKU,IAAIC,MAAM,+CALpB,cAOQC,EAASH,EAASI,OAP1B,kBAQSD,GART,kEC3BA,IAAIQ,EAAe,KAEZ,SAAShC,EAAUiC,EAAcC,EAAeC,GACrD,OAA0BC,EAAAA,EAAAA,UAASH,GAAnC,eAAO7B,EAAP,KAAciC,EAAd,KACMC,EAAgBC,OAAOC,KAAKpC,GAAO,GAiDzC,OA/CAqC,EAAAA,EAAAA,YAAU,WACR,GAAsB,OAAlBP,EAAJ,CAGA,IAAMQ,EAAe,mCAAG,oGAEpBL,GAAS,SAAAM,GAAS,yBAAUA,GAAV,IAAqBzC,SAAS,OAEzB,wBAAnBiC,EAJgB,gCAKGL,EAAmBI,GALtB,OAKlBF,EALkB,iCAMU,sBAAnBG,EANS,kCAOGhB,IAPH,QAOlBa,EAPkB,gDASGN,EACnBQ,EACAC,GAXgB,QASlBH,EATkB,eAchBY,EAAcZ,EAEG,YAAnBG,GACmB,wBAAnBA,GACmB,sBAAnBA,IAEQU,EAAYb,EAAZa,QACRD,EAAcC,GAEO,YAAnBV,IACMW,EAASd,EAATc,KACRF,EAAcE,GAEhBT,GAAS,SAAAM,GAAS,yBACbA,GADa,YAEhBzC,SAAS,GACRoC,EAAgBM,OA9BC,kDAiCpBP,GAAS,SAAAM,GAAS,yBACbA,GADa,IAEhBzC,SAAS,EACTC,MAAO,KAAM4C,aApCK,0DAAH,qDAwCrBL,OACC,CAACJ,EAAeJ,EAAeC,IAE3B,CAAC/B","sources":["pages/HomePage/HomePage.jsx","shared/services/moviesApi.js","shared/hooks/useMovies.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport { useMovies } from 'shared/hooks/useMovies';\nconst HomePage = () => {\n  const location = useLocation();\n\n  const [state] = useMovies(\n    {\n      movies: [],\n      loading: false,\n      error: null,\n    },\n    0,\n    'getTrendingMovies'\n  );\n\n  const { movies, loading, error } = state;\n  const homePageMovies = movies.map(({ original_title, id }) => (\n    <li key={id}>\n      <Link to={`movies/${id}`} state={{ from: location }}>\n        {original_title}\n      </Link>\n    </li>\n  ));\n  return (\n    <>\n      {loading && <p>Loading</p>}\n      {error && <p>{error}</p>}\n      <ul>{homePageMovies}</ul>\n    </>\n  );\n};\n\nexport default HomePage;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = 'f3ea85ad66a7076fbd3968a20cd79e45';\n\nconst params = new URLSearchParams({\n  api_key: KEY,\n  language: 'en-US',\n  page: 1,\n  include_adult: true,\n});\n\nasync function getTrendingMoviesForDay() {\n  const response = await fetch(`${BASE_URL}trending/movie/day?${params}`);\n  if (!response.ok) {\n    throw new Error('Something went wrong, try once again...');\n  }\n  const result = response.json();\n  return result;\n}\n\nfunction fetchDifferentMovieFeatures(id, feature) {\n  const finalFeature = feature ? `/${feature}` : '';\n  const requiredFunction = async () => {\n    const response = await fetch(\n      `${BASE_URL}movie/${id}${finalFeature}?api_key=${KEY}&language=en-US`\n    );\n    if (!response.ok) {\n      throw new Error('Something went wrong, try once again...');\n    }\n    const result = response.json();\n    return result;\n  };\n  return requiredFunction();\n}\n\nasync function fetchMoviesByQuery(query) {\n  const response = await fetch(\n    `${BASE_URL}search/movie?${params}&query=${query}`\n  );\n  if (!response.ok) {\n    throw new Error('You typed something wrong, please try again');\n  }\n  const result = response.json();\n  return result;\n}\nexport {\n  getTrendingMoviesForDay,\n  fetchDifferentMovieFeatures,\n  fetchMoviesByQuery,\n};\n","import { useState, useEffect } from 'react';\nimport {\n  fetchDifferentMovieFeatures,\n  fetchMoviesByQuery,\n  getTrendingMoviesForDay,\n} from '../services/moviesApi';\n\nlet requiredInfo = null;\n\nexport function useMovies(initialState, dependenceVar, fetchParameter) {\n  const [state, setState] = useState(initialState);\n  const firstStateKey = Object.keys(state)[0];\n\n  useEffect(() => {\n    if (dependenceVar === null) {\n      return;\n    }\n    const getInfoFunction = async () => {\n      try {\n        setState(prevState => ({ ...prevState, loading: true }));\n\n        if (fetchParameter === 'searchMoviesByQuery') {\n          requiredInfo = await fetchMoviesByQuery(dependenceVar);\n        } else if (fetchParameter === 'getTrendingMovies') {\n          requiredInfo = await getTrendingMoviesForDay();\n        } else {\n          requiredInfo = await fetchDifferentMovieFeatures(\n            dependenceVar,\n            fetchParameter\n          );\n        }\n        let finalResult = requiredInfo;\n        if (\n          fetchParameter === 'reviews' ||\n          fetchParameter === 'searchMoviesByQuery' ||\n          fetchParameter === 'getTrendingMovies'\n        ) {\n          const { results } = requiredInfo;\n          finalResult = results;\n        }\n        if (fetchParameter === 'credits') {\n          const { cast } = requiredInfo;\n          finalResult = cast;\n        }\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n          [firstStateKey]: finalResult,\n        }));\n      } catch (error) {\n        setState(prevState => ({\n          ...prevState,\n          loading: false,\n          error: error.message,\n        }));\n      }\n    };\n    getInfoFunction();\n  }, [firstStateKey, dependenceVar, fetchParameter]);\n\n  return [state];\n}\n"],"names":["location","useLocation","useMovies","movies","loading","error","state","homePageMovies","map","original_title","id","to","from","BASE_URL","KEY","params","URLSearchParams","api_key","language","page","include_adult","getTrendingMoviesForDay","fetch","response","ok","Error","result","json","fetchDifferentMovieFeatures","feature","finalFeature","requiredFunction","fetchMoviesByQuery","query","requiredInfo","initialState","dependenceVar","fetchParameter","useState","setState","firstStateKey","Object","keys","useEffect","getInfoFunction","prevState","finalResult","results","cast","message"],"sourceRoot":""}